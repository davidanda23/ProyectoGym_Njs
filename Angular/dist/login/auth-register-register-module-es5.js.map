{"version":3,"sources":["webpack:///src/app/auth/register/register-routing.module.ts","webpack:///src/app/auth/register/register.component.html","webpack:///src/app/auth/register/register.component.ts","webpack:///src/app/auth/register/register.module.ts"],"names":["routes","path","component","RegisterRoutingModule","forChild","imports","exports","RegisterComponent","authSvc","router","registerForm","email","required","minLength","password","confirmPassword","bandera","setTimeout","value","register","user","checkUserIsVerified","console","log","emailVerified","navigate","group","get","fire","title","text","onRegister","selector","templateUrl","styleUrls","providers","RegisterModule","declarations"],"mappings":"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","file":"auth-register-register-module-es5.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterComponent } from './register.component';\n\nconst routes: Routes = [{ path: '', component: RegisterComponent }];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class RegisterRoutingModule { }\n","<div class=\"spinner-border\" role=\"status\" *ngIf=\"this.bandera\">\n    <span class=\"sr-only\">Loading...</span>\n</div>\n<div class=\"row\">\n    <div class=\"col-md-6 mx-auto mt-5\">\n        <div class=\"card\">\n            <div class=\"card-body\">\n                <h1 class=\"text-center\">REGISTER</h1>\n                <form [formGroup]=\"registerForm\" novalidate (ngSubmit)=\"onRegister()\">\n                    <div class=\"form-group\">\n                        <label for=\"email\">Email</label>\n                        <input type=\"email\" class=\"form-control\" formControlName=\"email\">\n                        <div class=\"alert alert-danger\" *ngIf=\"registerForm.get('email').hasError('required') \n                            && registerForm.get('email').touched\">\n                            Email requerido\n                        </div>\n                        <div class=\"alert alert-danger\" *ngIf=\"registerForm.get('email').hasError('email') \n                            && registerForm.get('email').touched\">\n                            Formato de correo incorrecto\n                        </div>\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"password\">Password</label>\n                        <input type=\"password\" class=\"form-control\" formControlName=\"password\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"confirmPassword\">Confirm your password</label>\n                        <input type=\"password\" class=\"form-control\" formControlName=\"confirmPassword\">\n                        <div *ngIf=\"!passwordsMatch(registerForm)\" class=\"alert alert-danger\">\n                            Las contraseñas no coinciden.\n                        </div>\n                    </div>\n                    <ng-container *ngIf=\"!registerForm.invalid; else elseTemplate\">\n                        <button type=\"submit\" class=\"btn btn-primary btn-lg btn-block\">Register</button>\n                    </ng-container>\n                    <ng-template #elseTemplate>\n                        <button (click)=\"sendAlert()\" class=\"btn btn-primary btn-lg btn-block\">Register</button>\n                    </ng-template>\n                        \n                </form>\n                <div class=\"form-group mt-3\">\n                    <p>Do you have an account? <a [routerLink]=\"['/login']\">Login</a></p>\n                </div>\n            </div>\n        </div>\n    </div>\n</div>","import { Component, OnInit } from '@angular/core';\nimport{FormGroup, FormControl, Validators, ControlContainer} from '@angular/forms';\nimport {AuthService} from './../services/auth.service';\nimport { Router } from '@angular/router';\nimport {user} from '../../shared/models/user.interface';\nimport Swall from 'sweetalert2';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss'],\n  providers:[AuthService]\n})\nexport class RegisterComponent implements OnInit {\n  registerForm = new FormGroup({\n    email: new FormControl('',[Validators.required, Validators.minLength(2),Validators.email]),\n    password: new FormControl('',Validators.required,),\n    confirmPassword: new FormControl('',[Validators.required])\n  })\n  bandera:boolean;\n  constructor(private authSvc: AuthService, private router: Router) { \n    this.bandera=true;\n    setTimeout(() => { this.bandera=false; }, 1000);\n  }\n\n  ngOnInit(): void {\n  }\n  async onRegister(){\n    const {email, password, confirmPassword} = this.registerForm.value;\n    \n    try{\n      const user = await this.authSvc.register(email, password);\n      if(user){\n        this.checkUserIsVerified(user);\n      } \n      if(password === confirmPassword){\n        console.log(\"Contraseñas coinciden\");\n      }else{\n        console.log(\"Contraseñas no coinciden\");\n      }\n    }\n    catch(error){console.log(error)}\n  }\n\n  private checkUserIsVerified(user:user){\n    if(user && user.emailVerified){\n      this.router.navigate(['/home']);\n    }else if(user){\n      this.router.navigate(['/verification-email']);\n    }else{\n      this.router.navigate(['/register']);\n    }\n  }\n  \n  public passwordsMatch(group: FormGroup){\n    if(group.get('password').value === group.get('confirmPassword').value ){\n      return true;\n    }else{\n      return false;\n    }\n  }\n  sendAlert(){\n    Swall.fire({\n      title: \"Error!\",\n      text: \"Ingrese el formato correcto en todos los campos\"\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { RegisterRoutingModule } from './register-routing.module';\nimport { RegisterComponent } from './register.component';\nimport { ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [RegisterComponent],\n  imports: [\n    CommonModule,\n    RegisterRoutingModule,\n    ReactiveFormsModule\n  ]\n})\nexport class RegisterModule { }\n"]}